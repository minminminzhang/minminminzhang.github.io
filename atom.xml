<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术博客</title>
  
  <subtitle>学习的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://minminminzhang.github.io/"/>
  <updated>2018-09-07T13:36:01.262Z</updated>
  <id>https://minminminzhang.github.io/</id>
  
  <author>
    <name>张敏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于RESTful的理解</title>
    <link href="https://minminminzhang.github.io/2018/cjls1ex7e0000kknudngl93k9/"/>
    <id>https://minminminzhang.github.io/2018/cjls1ex7e0000kknudngl93k9/</id>
    <published>2018-09-07T13:20:07.497Z</published>
    <updated>2018-09-07T13:36:01.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="了解RESTful的起因"><a href="#了解RESTful的起因" class="headerlink" title="了解RESTful的起因"></a>了解RESTful的起因</h1><p>学习springmvc的时候，在配置前端控制器<url-pattern></url-pattern>中时有三种方式：</p><p>第一种：*.action，访问一、以.action结尾由DispatcherServlet进行解析。</p><p>第二种：/，所有访问的地址由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析，使用此种方法可以实现RESTful风格的url。</p><p>第三种：/*，这样配置不对使用此种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错。</p><p>由此了解到Resultful架构。</p><h1 id="RESTful的介绍"><a href="#RESTful的介绍" class="headerlink" title="RESTful的介绍"></a>RESTful的介绍</h1><p>RESTful架构，就是目前最流行的一种互联网软件架构。具有结构清晰，符合标准，易于理解，扩展方便的优点。</p><h2 id="RESTful的起源"><a href="#RESTful的起源" class="headerlink" title="RESTful的起源"></a>RESTful的起源</h2><p>Roy Thomas Fielding 在2000年的博士论文提出来的。他在文中写到：“长期以来，软件研究主要关注软件设计的分类、设计方法的演化，很少客观评估不同的设计选择对系统行为的影响。而相反的，网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽略的一个事实，那就是改变应用程序的互动风格比改变互动协议，对整体表现有更大的影响。我写这篇问猴子那个的目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、事宜通信的架构。”</p><p>Roy Thomas Fielding 将他对互联网软件的架构原则，命名为REST，，即Representational State Transfer的缩写。可翻译 为“表现层状态转化”。要理解RESTful的架构，最好的方法就是去理解Representational State Transfer词组的意思。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>REST翻译为“表现层状态转化”，省略的主语，“表现层”其实指的是“资源”的“表现层”。</p><p>“资源”就是网络上的一个实体，或者说就是网络上的一个具体信息。可以是一短文本、一张图片、一首歌曲，总之就是一个具体的存在实体。可以用一个URI访问它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以。上网就是与互联网上一系列的“资源”互动，调用它的URI。</p><h2 id="表现层"><a href="#表现层" class="headerlink" title="表现层"></a>表现层</h2><p>“资源”是一种信息实体，它可以有多种外在表现形式。我们把“资源”具体呈现出来的形式，叫做它的“表现层”。</p><p>比如：文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JSP格式表现，也可以用PNG格式表现。</p><p>URI只代表资源的实体，不代表它的形式。严格的说，有些网址最后的“.html”后缀名是不必要的，因为这个后缀名表示格式，属于“表现层”范围，而URL只代表“资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Context-Type字段指定，这两个字段才是对“表现层”的描述。</p><h2 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h2><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，涉及到数据和状态的变化。</p><p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器发生“状态转换”。而这种转换你是建立在表现层之上的，所以就是“表现层状态转换”。</p><p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表现操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种操作：GET用来获取资源，POST用来新建资源（也可用来更新资源），PUT用来更新资源，DELETE用来删除资源。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>综合以上学习，总结RESTful架构：</p><p>（1）每一个URI代表一种资源</p><p>（2）客户端和服务器之间，传递这种资源的表现层。</p><p>（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现“表现层状态转换”。</p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><p>（1）URI不能包含动词</p><p>​     因为“资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p><p>例如：网上汇款，从账户1向账户2汇款200元</p><p>​                  POST /accounts/1/transfer/200/to/2/</p><p>正确的写法应该是：POST  /transaction  HTTP/1.1</p><p>​                                 Host: 127.0.0.1</p><p>​                                from=1&amp;to=2&amp;account=200.00</p><p>（2）在URI中不能加入版本号</p><p>​      <a href="http://www.example.com/app/1.0/foo" target="_blank" rel="noopener">http://www.example.com/app/1.0/foo</a></p><p>​     <a href="http://www.example.com/app/1.1/foo" target="_blank" rel="noopener">http://www.example.com/app/1.1/foo</a></p><p>​     <a href="http://www.example.com/app/2.0/foo" target="_blank" rel="noopener">http://www.example.com/app/2.0/foo</a></p><p>不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头的Accept字段中进行区分</p><p>Accept: vnd.example-com.foo+json; version=1.0</p><p>Accept: vnd.example-com.foo+json; version=1.1</p><p>Accept: vnd.example-com.foo+json; version=2.0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;了解RESTful的起因&quot;&gt;&lt;a href=&quot;#了解RESTful的起因&quot; class=&quot;headerlink&quot; title=&quot;了解RESTful的起因&quot;&gt;&lt;/a&gt;了解RESTful的起因&lt;/h1&gt;&lt;p&gt;学习springmvc的时候，在配置前端控制器&lt;url-pa
      
    
    </summary>
    
      <category term="RESTful架构" scheme="https://minminminzhang.github.io/categories/RESTful%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="RESTful架构  URI资源" scheme="https://minminminzhang.github.io/tags/RESTful%E6%9E%B6%E6%9E%84-URI%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客</title>
    <link href="https://minminminzhang.github.io/2018/cjls1exfz0007kknu2g5te0dp/"/>
    <id>https://minminminzhang.github.io/2018/cjls1exfz0007kknu2g5te0dp/</id>
    <published>2018-09-07T07:09:45.688Z</published>
    <updated>2018-09-07T13:34:57.117Z</updated>
    
    <content type="html"><![CDATA[<p>​    对于一个认真的程序员，在学习过程中总要写Blog来记录学习过程中的点点滴滴。踩过的坑终将变成成功道路上的跳板。<br>    Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。经过搜索资料，不断学习，请教别人，最终搭建好了我的个人博客框架，在此写下整个过程分享。博文包括三个部分：构建基本框架、不断优化、补充内容。</p><p>​    </p><p>构建基本框架：从最简单的相关软件介绍到搭建完成属于自己的独立博客。不断优化：在完成简单的搭建之后，不断美化自己的页面展示。补充内容包括了Hexo的语法以及。。。。。。。</p><h1 id="构建基本框架："><a href="#构建基本框架：" class="headerlink" title="构建基本框架："></a>构建基本框架：</h1><hr><h2 id="基础准备："><a href="#基础准备：" class="headerlink" title="基础准备："></a>基础准备：</h2><p>&nbsp; &nbsp; &nbsp; &nbsp;<em>安装Git<br>&nbsp; &nbsp; &nbsp; &nbsp;将本地的Hexo提交到GitHub上进行管理<br>&nbsp; &nbsp; &nbsp; &nbsp;安装步骤：<br>&nbsp; &nbsp; &nbsp; &nbsp;1.在Git官网上(<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a>) 下载Windows版本。<br>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;2.下载完成后，双击.msi文件安装至G:\blogresoft\git。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em>安装NodeJs<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hexo是基于NodeJs环境的静态博客，里面的npm工具很有用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装步骤：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.在Node.js官网(<a href="https://nodejs.org/en" target="_blank" rel="noopener">https://nodejs.org/en</a>) 下载最新版本。<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      2.点击最新64位的8.11.4LTS版本下载到G盘新建的blogresoft文件夹下。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       3：双击.msi文件安装，不断点击next即可安装成功至G:\blogresoft\nodejs<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <em>GitHub账号<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       没有GitHub账号的情况下,在官网页面注册一个新的即可。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    </em>配置SSH Keys<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       配置SSH Keys 之后,每次对自己的博客改动之后，提交的时候,不再需要重新输入GitHub的账号的密码了。<br>       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置步骤:在 G:\blogresoft\git文件夹下点击git-bash.exe，输入以下命令检查.ssh文件是否已经存在：     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure><p>不存在会出现提示：<br>       ls: cannot access ‘/c/User/Administrator/ .ssh’:No such file or directory</p><p>接着执行如下代码，生成.ssh文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir .ssh</span><br></pre></td></tr></table></figure><p>进入.ssh文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd  .ssh</span><br></pre></td></tr></table></figure><p>输入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C&quot;GitHub登陆邮箱&quot;</span><br><span class="line"></span><br><span class="line">$ id_rsa</span><br></pre></td></tr></table></figure><p>按回车键，提示是否使用长密码，按回车，继续按回车，不使用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将ssh公钥部分添加到GitHub，.ssh文件夹下后缀名为.pub的文件是公钥，右键打开方式选择写字板打开，复制其中所有的内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在GitHub网站右上角点击setting。点击左侧SSH and GPG keys，点击右上角New SSH key，在Key中粘贴.ssh文件夹下后缀名为.pub的文件的所有内容，点击Add SSH key添加公钥，此时公钥状态为黑色。</p><p>在G:\blogresoft\git文件夹下双击git-bash.exe，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;usename&quot;</span><br><span class="line"></span><br><span class="line">$ git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure><p>其中usename为注册GitHub时的账户名，email为注册GitHub时的邮箱。<br>       输入如下命令，测试SSH是否配置成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现提示，输入yes回车，出现欢迎提示:<br>       Hi minminminzhang! Your’ve successfully authenticated,but GitHub does not provide shell access.</p><p>此时回到SSH and GPG keys处，公钥状态变为绿色。</p><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>​        在Git上新建一个仓库<br>        在GitHub上新建一个仓库，并取名为your_username.github.io，其中your_username是您自己的GitHub账号名。<br>        在本地写博客<br>        在G:/blogresoft/git文件夹下新建一个index.html文件，并输入一下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">      &lt;head&gt;</span><br><span class="line">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">      &lt;/head&gt;</span><br><span class="line">      &lt;body&gt;</span><br><span class="line">            &lt;p&gt;你好！这是我的第一篇博客&lt;/p&gt;</span><br><span class="line">      &lt;/body&gt;          </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p> 用Git把index.html提交到GitHub上，在cmd中输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git init </span><br><span class="line"></span><br><span class="line">$ git add index.html</span><br><span class="line">   </span><br><span class="line">$ git commit  -m &quot;我的第一篇博客&quot;</span><br><span class="line"></span><br><span class="line">$ git remote add originhttps://github.com/your_username/your_username.github</span><br><span class="line"></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>在浏览器中输入your_username.github.io即可访问文件。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h2 id="hexo安装配置："><a href="#hexo安装配置：" class="headerlink" title="hexo安装配置："></a>hexo安装配置：</h2><p>*下载Hexo<br>         下载官网： <a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a><br>          github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a><br>          在G:/blogresoft/git文件夹下双击git-bash.exe</p><p> 输入以下命令进行安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><p>在G:/blogresoft/git下安装文件夹hexo，并切换至Hexo工作目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd hexo</span><br></pre></td></tr></table></figure><p>初始化文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>安装hexo的扩展插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>安装其他插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git -save</span><br><span class="line">$ npm install hexo-renderer-ejs -save</span><br><span class="line">$ npm install hexo-renderer-stylus -save</span><br><span class="line">$ npm install hexo-render-marked -save</span><br></pre></td></tr></table></figure><p>生成静态页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>开启本地服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  hexo s</span><br></pre></td></tr></table></figure><p>会出现提示：<br>        INFO  Start processing<br>        INFO  Hexo is running at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> . Press Ctrl+C to stop</p><p>此时：访问<a href="http://localhost:4000就可以看到刚刚创建的博客了。" target="_blank" rel="noopener">http://localhost:4000就可以看到刚刚创建的博客了。</a><br><strong>注意</strong>：若是无法访问，说明端口4000被占用了。可以输入如下的命令换端口试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -p 5000</span><br></pre></td></tr></table></figure><p>更换后，访问<a href="http://localhost:5000进行查看。" target="_blank" rel="noopener">http://localhost:5000进行查看。</a><br> *部署Hexo：<br>         修改配置<br>         修改站点配置文件G:/blogresoft/git/hexo/_config.yml,修改deploy项的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo:  git@github.com:username/username.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p> <strong>注意</strong>：1.hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，称为站点配置文件，一个是各个theme下的，称为主题配置文件；<br>    2.type: repo: branch:分别和后面的内容之间有分隔<br>输入下面的命令将Hexo博客部署到GitHub中：<br>    清空静态页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p> 生成静态页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line">$ npm install hexo -deployer-git  -save</span><br></pre></td></tr></table></figure><p> 部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>在完成之后就可以访问<a href="https://minminminzhang.github.io,出现Hexo安装成功的页面提示。">https://minminminzhang.github.io,出现Hexo安装成功的页面提示。</a><br><strong>注意</strong>：我在最后一部配置的时候出现了仓库不存在的提示：<br>出现这种错误，有两种原因：<br>    1.修改站点文件时：仓库名输入有误<br>    2.在部署之前没有执行$ npm install hexo -deployer-git  -save<br>还有一种错误的情况由G:/blogresoft/git/hexo下的.deploy_git隐藏文件所致,删除这个隐藏文件即可。<br>完成之后进行重新部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>重新访问进行验证。</p><h1 id="不断优化"><a href="#不断优化" class="headerlink" title="不断优化"></a>不断优化</h1><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p> Hexo中G:/blogresoft/git/hexo/themes/landscape默认的主题很简陋，我们可以换成更美观的。本博客选择Next主题，简单美观，好配置。<br>     下载主题：<br>      在Next发布页面(<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next/releases</a>) 下载最新版本hexo-theme-next-5.1.4。放在G:/blogresoft/git/hexo/themes文件夹下并改名为next。<br>启用主题<br>打开站点配置文件，在theme字段更改如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme： next</span><br></pre></td></tr></table></figure><p>主题安装完成，在切换之前，用hexo clean来清除hexo的缓存。</p><p>验证主题：<br>    启动Hexo本地站点，并开启调试模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo  s -debug</span><br></pre></td></tr></table></figure><p>出现提示：INFO Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>. Press Ctrl+C to stop </p><p>此时使用浏览器访问<a href="http://localhost:4000，检查Next安装是否成功。" target="_blank" rel="noopener">http://localhost:4000，检查Next安装是否成功。</a><br>Next安装成功之后的页面设置参考： <a href="https://blog.csdn.net/u012195214/article/details/79204088" target="_blank" rel="noopener">https://blog.csdn.net/u012195214/article/details/79204088</a></p><h2 id="写博客："><a href="#写博客：" class="headerlink" title="写博客："></a>写博客：</h2><p>定位到hexo根目录，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &apos;my first-blog&apos;</span><br></pre></td></tr></table></figure><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hexo会帮我们在 G:/blogresoft/git/hexo/source/_posts 下生成相关文件，我们只需要打开这个文件就可以开始写博客了。<br> 当然也可以在G:/blogresoft/git/hexo/source/_posts 直接创建后缀为.md的文件。使用命令的好处是帮我们自动生成了时间。</p><p> &nbsp;&nbsp;&nbsp;&nbsp;打开文件，除了在文章开头部分的一些参数，比如标题(title:) 、创建时间(date:) 等，正文部分使用Markdown格式书写:<br> <strong>注意：</strong>NexT默认主页显示文章的全部内容，这对于有些很长的文章来说非常不美观，建议主页仅显示文章的摘要。<br> 在合适的位置插入以下内容作为分隔符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ &lt;!--is more--&gt;</span><br></pre></td></tr></table></figure><p>分隔符以前的内容将会在索引页上显示为摘要。</p><h1 id="补充内容："><a href="#补充内容：" class="headerlink" title="补充内容："></a>补充内容：</h1><p> Hexo常用命令：  </p><p>npm install hexo -g #安装<br>npm update hexo -g #更新<br>hexo init #初始化<br>hexo publish [layout] <title> #发表草稿。<br>hexo n “name” #新建文章<br>hexo g #生成静态网页<br>hexo p #发表草稿。</title></p><p>hexo s #启动服务<br>hexo d #部署网站 参数：-g 部署之前先生成静态文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    对于一个认真的程序员，在学习过程中总要写Blog来记录学习过程中的点点滴滴。踩过的坑终将变成成功道路上的跳板。&lt;br&gt;    Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。经过搜索资料，不
      
    
    </summary>
    
      <category term="搭建个人博客" scheme="https://minminminzhang.github.io/categories/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="搭建个人博客  相关技术" scheme="https://minminminzhang.github.io/tags/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://minminminzhang.github.io/2018/cjls1ex7o0002kknua8kxrwy3/"/>
    <id>https://minminminzhang.github.io/2018/cjls1ex7o0002kknua8kxrwy3/</id>
    <published>2018-04-10T09:20:09.000Z</published>
    <updated>2018-08-30T09:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
